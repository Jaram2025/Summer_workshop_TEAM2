Metadata-Version: 2.4
Name: summer-workshop-team-2-backend
Version: 0.1.0
Summary: Add your description here
Requires-Python: >=3.13
Description-Content-Type: text/markdown
Requires-Dist: fastapi[standard]>=0.116.1
Requires-Dist: google>=3.0.0
Requires-Dist: google-generativeai>=0.8.5
Requires-Dist: pydantic>=2.11.7
Requires-Dist: pydantic-settings>=2.10.1
Requires-Dist: python-dotenv>=1.1.1
Requires-Dist: python-multipart>=0.0.20
Requires-Dist: requests>=2.32.4
Requires-Dist: typing-extensions>=4.14.1
Requires-Dist: uvicorn>=0.35.0

# 선물 추천 서비스 백엔드

Gemini API를 활용한 맞춤형 선물 추천 서비스의 백엔드 API입니다.

## 🎁 기능

- **맞춤형 선물 추천**: 생일, 성별, 나이, 관계를 기반으로 한 개인화된 선물 추천
- **다양한 옵션**: 예산, 관심사, 특별 요청사항 고려
- **한국 문화 최적화**: 한국 정서와 문화에 맞는 선물 추천
- **실시간 AI 추천**: Google Gemini AI를 활용한 지능적인 추천 시스템

## 🛠️ 기술 스택

- **Backend**: FastAPI (Python)
- **AI**: Google Gemini API
- **Validation**: Pydantic
- **Environment**: python-dotenv

## 📁 프로젝트 구조

```
Summer_workshop_TEAM_2_BACKEND/
├── app/
│   ├── __init__.py
│   ├── main.py
│   ├── config.py              # 애플리케이션 설정
│   ├── models/
│   │   └── __init__.py
│   ├──core
│   ├── __init__.py
│   │   └── config.py 
│   ├── routers/
│   │   ├── __init__.py
│   │   └── routes.py     # API 라우터
│   └── services/
│       ├── __init__.py
│       └── gemini_service.py  # Gemini API 서비스
│          # AI 프롬프트 템플릿
├── tests/                     # 테스트 파일
├── venv/                      # 가상환경
├── .env                       # 환경변수 (API 키 등)
├── main.py                    # 애플리케이션 진입점
├── requirements.txt           # Python 의존성
├── setup.bat                  # 개발환경 설정 스크립트
├── run.bat                    # 서버 실행 스크립트
└── README.md                  # 프로젝트 문서
```

## 🚀 빠른 시작

### 1. 환경 설정

```bash
# 1. 개발환경 자동 설정
setup.bat

# 또는 수동 설정
python -m venv venv
venv\Scripts\activate
pip install -r requirements.txt
```

### 2. API 키 설정

`.env` 파일을 열고 Gemini API 키를 설정하세요:

```env
GEMINI_API_KEY=your_actual_gemini_api_key_here
```

**Gemini API 키 발급 방법:**
1. [Google AI Studio](https://makersuite.google.com/app/apikey) 접속
2. "Create API Key" 클릭
3. 발급받은 키를 `.env` 파일에 입력

### 3. 서버 실행

```bash
# 자동 실행
run.bat

# 또는 수동 실행
python main.py
```

서버가 시작되면:
- API 서버: http://localhost:8000
- API 문서: http://localhost:8000/docs
- 상태 확인: http://localhost:8000/health

## 📋 API 엔드포인트

### 1. 선물 추천 받기
```http
POST /api/v1/recommend
```

**요청 예시:**
```json
{
    "birthday": "1995-03-15",
    "gender": "female", 
    "age": 29,
    "relationship": "친한친구",
    "budget_min": 30000,
    "budget_max": 100000,
    "interests": ["독서", "요리", "여행"],
    "special_notes": "최근에 새집으로 이사갔어요"
}
```

**응답 예시:**
```json
{
    "success": true,
    "message": "선물 추천이 완료되었습니다.",
    "recommendations": [
        {
            "name": "아로마 디퓨저 세트",
            "description": "새집에 어울리는 은은한 향의 아로마 디퓨저",
            "estimated_price": "5만원 ~ 8만원",
            "reason": "새집 이사와 여성의 실용적 선호도 고려",
            "where_to_buy": ["올리브영", "온라인몰", "백화점"],
            "category": "생활용품"
        }
    ],
    "total_count": 5,
    "summary": "29세 여성 친구를 위한 새집 관련 실용적이고 감성적인 선물들"
}
```

### 2. 기타 API
- `GET /api/v1/test` - Gemini API 연결 테스트
- `GET /api/v1/categories` - 선물 카테고리 목록
- `GET /api/v1/relationships` - 관계 목록
- `GET /api/v1/health` - 서비스 상태 확인

## 🔧 개발 도구

### API 문서
서버 실행 후 http://localhost:8000/docs 에서 Swagger UI를 통해 API를 테스트할 수 있습니다.

### 디버깅
`app/config.py`에서 `DEBUG=True`로 설정하면 상세한 오류 정보를 볼 수 있습니다.

### 로깅
애플리케이션 로그는 콘솔에 출력됩니다. 로그 레벨은 `app/services/gemini_service.py`에서 조정할 수 있습니다.

## 🎯 주요 특징

### 1. 지능적인 추천 시스템
- Google Gemini AI를 활용한 맞춤형 추천
- 한국 문화와 정서를 고려한 프롬프트 엔지니어링
- 실용성과 감성적 가치를 모두 고려

### 2. 유연한 입력 옵션
- 필수: 생일, 성별, 나이, 관계
- 선택: 예산 범위, 관심사, 특별 요청사항

### 3. 안정적인 서비스
- API 오류 시 기본 추천 제공
- 상세한 오류 처리 및 로깅
- 입력값 검증 및 보안

## 🔒 보안 고려사항

- `.env` 파일은 절대 Git에 커밋하지 마세요
- API 키는 환경변수로만 관리
- 입력값 검증 및 SQL 인젝션 방지

## 🐛 문제 해결

### 1. Gemini API 오류
```
Gemini API 키가 설정되지 않았습니다
```
→ `.env` 파일에서 `GEMINI_API_KEY` 확인

### 2. 가상환경 오류
```
venv\Scripts\activate.bat이 없습니다
```
→ `setup.bat` 실행하여 가상환경 재생성

### 3. 포트 충돌
```
Port 8000 already in use
```
→ `main.py`에서 포트 번호 변경 또는 기존 프로세스 종료

## 📞 지원

문제가 발생하면 다음을 확인해주세요:
1. Python 3.8+ 설치 여부
2. Gemini API 키 설정 상태
3. 필요한 패키지 설치 완료
4. 방화벽/보안 프로그램 설정

## 📝 라이선스

이 프로젝트는 한양대학교 자람 여름 워크샵 팀 프로젝트입니다.
